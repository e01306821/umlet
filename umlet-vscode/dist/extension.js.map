{"version":3,"sources":["../webpack/bootstrap",".././src/extension.ts","../external \"vscode\"","../external \"path\"","../external \"fs\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","context","console","log","disposable","vscode","commands","registerCommand","panel","window","createWebviewPanel","ViewColumn","One","enableScripts","retainContextWhenHidden","localResourceRoots","Uri","file","path","join","extensionPath","webview","onDidReceiveMessage","message","command","fileContent","text","showSaveDialog","filters","then","fileInfos","undefined","fsPath","fs","writeFile","err","actual_data","replace","encoding","SaveFileDecode","subscriptions","onDiskPath","localUmletFolder","asWebviewUri","toString","html","GetUmletWebviewPage","push","require"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport * as path from 'path';\nimport fs = require('fs');\n//import path = require('path');\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  \n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"MFTHE\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('extension.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\t\tconst panel = vscode.window.createWebviewPanel(\n\t\t\t'umletino',\n\t\t\t'Umletino',\n\t\t\tvscode.ViewColumn.One,\n\t\t\t{\n        enableScripts: true,\n        retainContextWhenHidden: true,\n        localResourceRoots: [vscode.Uri.file(path.join(context.extensionPath, 'src', 'umlet-gwt'))]\n\t\t\t}\n\n    );\n\n    // Handle messages from the webview\n    panel.webview.onDidReceiveMessage(\n      message => {\n        switch (message.command) {\n          case 'exportUxf':\n            SaveFile(message.text);\n            return;\n          case 'exportPng':\n            //todo\n            console.log(\"implement actually exporting the png, but url is:\" +message.text);\n            var actual_data = message.text.replace(\"data:image/png;base64,\", \"\");\n            console.log(\"actual data:\" + actual_data);\n            SaveFileDecode(actual_data);\n            console.log(\"FINISHED\");\n            return;\n        }\n      },\n      undefined,\n      context.subscriptions\n    );\n\n    \n\n\n\n    //GetCacheOneJavascript(context.extensionPath);\n    /*\n    SaveFile(`<diagram program=\"umletino\" version=\"14.3.0\"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>410</x><y>240</y><w>210</w><h>70</h></coordinates><panel_attributes>_object: Class_\n    --\n    id: Long=\"1234\"\n    [first umlet]</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>500</x><y>300</y><w>170</w><h>160</h></coordinates><panel_attributes>lt=&lt;.\n    &lt;&lt;instanceOf&gt;&gt;</panel_attributes><additional_attributes>140;140;10;10</additional_attributes></element><element><id>UMLUseCase</id><coordinates><x>590</x><y>440</y><w>120</w><h>80</h></coordinates><panel_attributes>Use case 1</panel_attributes><additional_attributes></additional_attributes></element></diagram>`);\n    */\n\n\n\n    //convert local folder to a vscode readable uri\n    // Get path to resource on disk\n    const onDiskPath = vscode.Uri.file(\n      path.join(context.extensionPath, 'src', 'umlet-gwt')\n    );\n\n    // And get the special URI to use with the webview\n    const localUmletFolder = panel.webview.asWebviewUri(onDiskPath);\n    console.log('the global source is:' +localUmletFolder);\n\n    /*\n    const filePath: vscode.Uri = vscode.Uri.file(path.join(context.extensionPath, 'src', 'html', 'file.html'));\n    //const filePath: vscode.Uri = vscode.Uri.file(path.join(context.extensionPath, 'src', 'umlet-gwt', 'index.html'));\n    console.log ('the html is: ' + fs.readFileSync(filePath.fsPath, 'utf8'));\n    panel.webview.html = fs.readFileSync(filePath.fsPath, 'utf8'); */\n    console.log('globaluri as string is:' + localUmletFolder.toString());\n    \n    console.log('try to prepr file:' + path.join(context.extensionPath, 'helloworld.txt'));\n    fs.writeFile(path.join(context.extensionPath, 'helloworld.txt'), 'Hello World!', function (err) {\n      if (err) {return console.log(err);}\n      console.log('Hello World > helloworld.txt');\n    });\n    console.log('try to save');\n      console.log('save done');\n    panel.webview.html = GetUmletWebviewPage(localUmletFolder.toString());\n\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\nfunction SaveFile(fileContent: string)\n{\n  vscode.window.showSaveDialog({\n    filters:{\n      'UML Diagram': ['uxf']\n    } \n  })\n  .then(fileInfos => {\n    if(fileInfos !== undefined)\n    {\n      console.log('my path:' + fileInfos.fsPath);\n      fs.writeFile(fileInfos.fsPath, fileContent, function (err) {\n      if (err) {return console.log(err);}\n      console.log('Hello World > helloworld.txt');\n  });\n  console.log('try to save');\n    }\n  });\n}\n\nfunction SaveFileDecode(fileContent: string)\n{\n  vscode.window.showSaveDialog({\n    filters:{\n      'Image': ['png']\n    } \n  })\n  .then(fileInfos => {\n    if(fileInfos !== undefined)\n    {\n      console.log('my path:' + fileInfos.fsPath);\n      fs.writeFile(fileInfos.fsPath, fileContent, {encoding: 'base64'}, function (err) {\n      if (err) {return console.log(err);}\n      console.log('Hello World > helloworld.txt');\n  });\n  console.log('try to save');\n    }\n  });\n}\n\nfunction GetCacheOneJavascript(extensionPath: string)\n{\n  //change the dom created by javascript\n  var cacheOnePath = path.join(extensionPath, 'src', 'umlet-gwt', 'baseletgwt', 'deferredjs', '274F3D0FF78DA14FE85FDE4ABAB0B8E5', '1.cache.js');\n  console.log(\"trying to read from:\" + cacheOnePath);\n  \n  var data;\n  try {\n    data = fs.readFileSync(cacheOnePath, 'utf8');\n  } catch (err) {\n    console.error(err);\n  }\n\n  //find and replace the wanted tag\n  let pathReplacementTag = '#TESTER_FOR_LATER_REPLACEMENT_WITH_USER_DIRECTORY#';\n  let positionInText: number | undefined = data?.indexOf(pathReplacementTag);\n  console.log(\"found text in :\" + positionInText );\n  if (positionInText !== undefined && data !== undefined)\n  {\n    data = data?.replace(pathReplacementTag, extensionPath);\n  \n    console.log(data.substring(positionInText-10, 1000));\n  \n    console.log(\"finished reading data\");\n  }\n  \n}\n\nfunction GetUmletWebviewPage(localUmletFolder: string)\n{\n  return `<!DOCTYPE html>\n  <html>\n    <head>\n      <base href=\"${localUmletFolder}/\" />\n      <meta name=\"viewport\" content=\"user-scalable=no\" />\n      <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n      <link type=\"text/css\" rel=\"stylesheet\" href=\"umletino.css\">\n      <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n      <title>UMLetino - Free Online UML Tool for Fast UML Diagrams</title>\n      <script type=\"text/javascript\" src=\"baseletgwt/baseletgwt.nocache.js?2020-03-15_09-48-08\"></script>\n    </head>\n    <body>\n      <!-- the following line is necessary for history support -->\n      <iframe src=\"javascript:''\" id=\"__gwt_historyFrame\" tabIndex='-1' style=\"position:absolute;width:0;height:0;border:0\"></iframe>\n      \n      <!-- the website will not work without JavaScript -->\n      <noscript>\n        <div style=\"width: 25em; position: absolute; left: 50%; margin-left: -11em; background-color: white; border: 1px solid red; padding: 4px; font-family: sans-serif\">\n          You must enable JavaScript to use this web application.\n      </div>\n      </noscript>\n      <div align=\"left\" id=\"featurewarning\" style=\"color: red; font-family: sans-serif; font-weight:bold; font-size:1.2em\"></div>\n      \n    </body>\n    <script>\n      var vscode = acquireVsCodeApi();\n    </script>\n\n  </html>`;\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n\n\n","module.exports = require(\"vscode\");","module.exports = require(\"path\");","module.exports = require(\"fs\");"],"sourceRoot":""}